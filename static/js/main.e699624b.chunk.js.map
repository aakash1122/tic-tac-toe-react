{"version":3,"sources":["Box.js","App.js","serviceWorker.js","index.js"],"names":["Box","value","pos","setBoxValue","winner","className","onClick","App","state","boxes","Array","fill","playerX","boxLeft","gameOver","index","newBoxes","slice","newCount","setState","togglePlayer","CheckForWinner","checkBoxAvailability","lines","i","length","a","b","c","playAgain","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e699624b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Box({ value, pos, setBoxValue, winner }) {\n  let onClickHandler = () => {\n    if (!winner) {\n      setBoxValue(pos);\n    }\n  };\n\n  return (\n    <div className=\"box\" onClick={onClickHandler}>\n      <span className=\"animtext\">{value}</span>\n    </div>\n  );\n}\n// check box clicked or not\n//change box value\n//check for winner\n//toggle player\n","import Box from \"./Box\";\nimport React, { Component } from \"react\";\n\nexport default class App extends Component {\n  state = {\n    boxes: new Array(9).fill(null),\n    playerX: true,\n    winner: null,\n    boxLeft: 9,\n    gameOver: false\n  };\n\n  setBoxValue = index => {\n    if (!this.state.boxes[index]) {\n      let newBoxes = this.state.boxes.slice();\n      newBoxes[index] = this.state.playerX ? \"X\" : \"O\";\n      let newCount = this.state.boxLeft - 1;\n      this.setState(\n        {\n          ...this.state,\n          boxes: newBoxes,\n          boxLeft: newCount\n        },\n        this.togglePlayer\n      );\n    }\n  };\n\n  togglePlayer = () => {\n    this.setState(\n      {\n        ...this.state,\n        playerX: !this.state.playerX\n      },\n      this.CheckForWinner\n    );\n  };\n\n  checkBoxAvailability = () => {\n    if (this.state.boxLeft === 0) {\n      this.setState({ ...this.state, gameOver: true, winner: \"No One\" });\n    }\n  };\n\n  CheckForWinner = () => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        this.state.boxes[a] &&\n        this.state.boxes[a] === this.state.boxes[b] &&\n        this.state.boxes[a] === this.state.boxes[c]\n      ) {\n        this.setState({\n          ...this.state,\n          gameOver: true,\n          winner: this.state.boxes[a]\n        });\n      } else {\n        this.checkBoxAvailability();\n      }\n    }\n    return null;\n  };\n\n  playAgain = () => {\n    this.setState({\n      boxes: new Array(9).fill(null),\n      playerX: true,\n      winner: null,\n      boxLeft: 9,\n      gameOver: false\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        {this.state.gameOver ? (\n          <div className=\"winner-container\">\n            <h1>Winner is {this.state.winner}</h1>\n            <button onClick={this.playAgain}>Play Again</button>\n          </div>\n        ) : null}\n        <h1>Classic TIC TAC TOE</h1>\n        <div className=\"container\">\n          <div className=\"row\">\n            <Box\n              value={this.state.boxes[0]}\n              pos={0}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n            <Box\n              value={this.state.boxes[1]}\n              pos={1}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n            <Box\n              value={this.state.boxes[2]}\n              pos={2}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n          </div>\n          <div className=\"row\">\n            <Box\n              value={this.state.boxes[3]}\n              pos={3}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n            <Box\n              value={this.state.boxes[4]}\n              pos={4}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n            <Box\n              value={this.state.boxes[5]}\n              pos={5}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n          </div>\n          <div className=\"row\">\n            <Box\n              value={this.state.boxes[6]}\n              pos={6}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n            <Box\n              value={this.state.boxes[7]}\n              pos={7}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n            <Box\n              value={this.state.boxes[8]}\n              pos={8}\n              setBoxValue={this.setBoxValue}\n              winner={this.state.winner}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}